/* Copyright (c) 2011 The University of Sheffield.
 * 
 * This file is part of StateChum
 * 
 * StateChum is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * StateChum is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with StateChum.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */
/*
 * ErlangApplicationLoader.java
 *
 * Created on Feb 16, 2011, 10:16:50 AM
 */
package statechum.Interface;

import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.ListModel;
import javax.swing.filechooser.FileFilter;

import statechum.GlobalConfiguration;
import statechum.GlobalConfiguration.G_PROPERTIES;
import statechum.analysis.Erlang.ErlangApp;
import statechum.analysis.Erlang.ErlangAppReader;
import statechum.analysis.Erlang.ErlangModule;
import statechum.analysis.Erlang.ErlangRunner;
import statechum.analysis.learning.rpnicore.LearnerGraph;
import statechum.apps.ErlangQSMOracle;

/**
 * 
 * @author ramsay
 */
@SuppressWarnings("serial")
public class ErlangApplicationLoader extends javax.swing.JFrame {

	protected ErlangApp app;
	protected File folder;

	/** Creates new form ErlangApplicationLoader */
	public ErlangApplicationLoader() {
		super("StateChum Erlang Application Loader");
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		appFile = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		beginButton = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		startModule = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		startModuleArgs = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		modules = new javax.swing.JList();
		jButton2 = new javax.swing.JButton();
		jButton3 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText("App file:");

		jButton1.setText("...");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		beginButton.setText("All");
		beginButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				beginButtonActionPerformed(evt);
			}
		});

		jLabel2.setText("Start Module:");

		jLabel3.setText("Start Args:");

		jLabel4.setText("Modules:");

		jScrollPane1.setViewportView(modules);

		jButton2.setText("View");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		jButton3.setText("Reload");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(jLabel1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(appFile,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		720, Short.MAX_VALUE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jButton3)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jButton1))
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(jLabel2)
																				.addComponent(jLabel3))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						startModuleArgs,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						211,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addComponent(
																						startModule,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						211,
																						javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(jLabel4)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(jScrollPane1,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		863, Short.MAX_VALUE))
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(jButton2)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(beginButton)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel1)
												.addComponent(appFile,
														javax.swing.GroupLayout.PREFERRED_SIZE, 25,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jButton1).addComponent(jButton3))
								.addGap(18, 18, 18)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel2)
												.addComponent(startModule,
														javax.swing.GroupLayout.PREFERRED_SIZE, 21,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel3)
												.addComponent(startModuleArgs,
														javax.swing.GroupLayout.PREFERRED_SIZE, 21,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGap(18, 18, 18)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel4)
												.addComponent(jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE, 434,
														Short.MAX_VALUE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(beginButton).addComponent(jButton2))
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	protected File selectedFile;

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		JFileChooser chooser = new JFileChooser();
		chooser.setAcceptAllFileFilterUsed(false);
		chooser.addChoosableFileFilter(new ErlangApplicationLoader.appFilter());
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		int returnValue = chooser.showOpenDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			selectedFile = chooser.getSelectedFile();
			appFile.setText(selectedFile.getName());
			loadData();
		}
	}// GEN-LAST:event_jButton1ActionPerformed

	/** Loads a list of modules and returns true on success. */
	protected boolean loadData() {
		try {
			if (selectedFile.getName().endsWith(".app")) {
				folder = selectedFile.getParentFile();
				app = ErlangAppReader.readAppFile(selectedFile.getName(), folder);
			} else {
				folder = selectedFile;
				app = ErlangAppReader.readFolder(selectedFile);
			}
			startModule.setText(app.startModule);
			startModuleArgs.setText(app.startModuleArgs);
			DefaultListModel model = new DefaultListModel();
			for (ErlangModule m : app.modules) {
				model.addElement(m);
			}
			modules.setModel(model);
		} catch (IOException e) {
			System.out.println("Failed to load application from " + selectedFile);
			return false;
		}
		return true;
	}

	/** Deletes all auxiliary Erlang files in the supplied directory. */
	public static void zapErlFiles(File where) {
		// Keeping these for debugging and interest:
		// "test2.out","test2.out.covermap",
		for (String str : new String[] { "erl_crash.dump", ".dialyzer_plt", "tmp.cover" }) {
			File file = new File(where.getAbsolutePath() + File.separator + str);
			if (file.canRead() && !file.delete())
				throw new RuntimeException("failed to delete " + file.getAbsolutePath());
		}

	}

	private void beginButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_beginButtonActionPerformed
		zapErlFiles(folder);
		try {
			/* Files in this folder are supposed to be compiled by ErlangRunner - it has a place where they are listed.

			for (File f : ErlangRunner.ErlangFolder.listFiles())
				if (ErlangRunner.validName(f.getName()))
					ErlangRunner.compileErl(f, ErlangRunner.getRunner());
			 */
			for (Object s : app.modules) {
				try {
					// Load the module
					ErlangModule m = (ErlangModule) s;

					// FIXME configurable...
					int len = 25;
					int count = 50;
					boolean exhaustAlphabet = true;
					boolean useOutputMatching = true;
					System.out.println("Generating traces for " + m.name + "...");
					String tracefile = m.name + ".traces";
					ErlangTraceGenerator.genRandom(m, new File(tracefile), len, count, exhaustAlphabet,
							useOutputMatching);

					// Run ErlangQSMOracle on the trace file...
					
					System.out.println("Learning " + m.name + "...");
					LearnerGraph g = ErlangQSMOracle.startInference(tracefile);
					System.out.println("Produced " + g.getStateNumber() + " states");
					if(g.getStateNumber() > 2) {
						System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
					} else {
						System.out.println("-------------------------------------------------");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} finally {
			zapErlFiles(folder);
		}

	}// GEN-LAST:event_beginButtonActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		for (Object s : modules.getSelectedValues()) {
			ErlangModuleViewer view = new ErlangModuleViewer((ErlangModule) s);
			view.pack();
			view.setVisible(true);

		}
	}// GEN-LAST:event_jButton2ActionPerformed

	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
		loadData();
	}// GEN-LAST:event_jButton3ActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		if (args.length > 0) {// run the analysis directly

			ErlangApplicationLoader loader = new ErlangApplicationLoader();
			loader.selectedFile = new File(args[0]);
			ErlangApplicationLoader.zapErlFiles(loader.selectedFile);
			loader.loadData();
			/*
			 * What is this even for?.... if (loader.loadData() &&
			 * loader.modules.getModel().getSize() != 1) { ListModel modules =
			 * loader.modules.getModel(); StringBuffer tooManyException = new
			 * StringBuffer("more than a single module choice for app " +
			 * loader.selectedFile + "\n"); for (int i = 0; i <
			 * modules.getSize(); ++i) {
			 * tooManyException.append(modules.getElementAt(i));
			 * tooManyException.append('\n'); } throw new
			 * IllegalArgumentException(tooManyException.toString()); }
			 * loader.modules.setSelectedIndex(0);
			 * loader.beginButtonActionPerformed(null);
			 */
			loader.setVisible(true);
		} else {
			java.awt.EventQueue.invokeLater(new Runnable() {

				@Override
				public void run() {
					new ErlangApplicationLoader().setVisible(true);
				}
			});
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel appFile;
	private javax.swing.JButton beginButton;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JList modules;
	private javax.swing.JLabel startModule;
	private javax.swing.JLabel startModuleArgs;

	// End of variables declaration//GEN-END:variables

	class appFilter extends FileFilter {

		@Override
		public boolean accept(File f) {
			if (f.isDirectory()) {
				return true;
			}
			int i = f.getName().lastIndexOf(".");
			if (i >= 0) {
				String extension = f.getName().substring(i).toLowerCase();
				if (extension.equals(".app")) {
					return true;
				}
			}
			return false;
		}

		// The description of this filter
		@Override
		public String getDescription() {
			return "Just .app files";
		}
	}
}
