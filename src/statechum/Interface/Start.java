/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Start.java
 *
 * Created on Apr 14, 2011, 2:57:51 PM
 */
package statechum.Interface;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import statechum.analysis.Erlang.ErlangModule;
import statechum.analysis.Erlang.ErlangRunner;

/**
 *
 * @author ramsay
 */
public class Start extends javax.swing.JFrame {

	private final String initialDirectory;
	
    /**
	 * ID for serialisation.
	 */
	private static final long serialVersionUID = -4326469608069940928L;
	
	/** Creates new form Start */
    public Start(String dir) {
    	initialDirectory = dir;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    	this.setTitle("StateChum");
    	
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        //jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setText("StateChum");

        jButton1.setText("Load a trace file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Load an Erlang Module");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jButton2)))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static class TxtFileFilter extends FileFilter
    {
		@Override
		public boolean accept(File fileName) {
			if (fileName.isDirectory()) {
		        return true;
		    }

			String trimmedName = fileName.getName();
			int pos = trimmedName.lastIndexOf('.');
			if (pos <= 0)
				return false;
			
			return trimmedName.substring(pos+1).equals("txt");
		}

		@Override
		public String getDescription() {
			return "text files";
		}
    	
    }
    
    public static class ErlFileFilter extends FileFilter
    {
		@Override
		public boolean accept(File fileName) {
			if (fileName.isDirectory()) {
		        return true;
		    }

			return ErlangRunner.validName(fileName.getAbsolutePath());
		}

		@Override
		public String getDescription() {
			return "Erlang files";
		}
    	
    }
    
    void jButton1ActionPerformed(@SuppressWarnings("unused") java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser(initialDirectory);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new TxtFileFilter());
        int returnValue = chooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                Traces.main(new String[]{chooser.getSelectedFile().getCanonicalPath()});
            } catch (IOException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    void jButton2ActionPerformed(@SuppressWarnings("unused") java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser chooser = new JFileChooser(initialDirectory);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new ErlFileFilter());
       int returnValue = chooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                ErlangModuleViewer modview = new ErlangModuleViewer(ErlangModule.loadModule(
                		ErlangModule.setupErlangConfiguration(chooser.getSelectedFile())));
                modview.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Start.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
			public void run() {
                new Start(args.length>0?args[0]:
                	// http://stackoverflow.com/questions/4871051/getting-the-current-working-directory-in-java
                	System.getProperty("user.dir")).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
